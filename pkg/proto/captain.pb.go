// Code generated by protoc-gen-go. DO NOT EDIT.
// source: captain.proto

// 依照 https://cloud.google.com/apis/design/naming_convention 規範

package captainkube_v2

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SyncChartRequest struct {
	Chart                *Chart        `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	Timeout              string        `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Retag                *ReTag        `protobuf:"bytes,3,opt,name=retag,proto3" json:"retag,omitempty"`
	RegistryAuth         *RegistryAuth `protobuf:"bytes,4,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	Verbose              bool          `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Color                bool          `protobuf:"varint,6,opt,name=color,proto3" json:"color,omitempty"`
	Set                  []string      `protobuf:"bytes,7,rep,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SyncChartRequest) Reset()         { *m = SyncChartRequest{} }
func (m *SyncChartRequest) String() string { return proto.CompactTextString(m) }
func (*SyncChartRequest) ProtoMessage()    {}
func (*SyncChartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75f80b18f5aaa93a, []int{0}
}

func (m *SyncChartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncChartRequest.Unmarshal(m, b)
}
func (m *SyncChartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncChartRequest.Marshal(b, m, deterministic)
}
func (m *SyncChartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncChartRequest.Merge(m, src)
}
func (m *SyncChartRequest) XXX_Size() int {
	return xxx_messageInfo_SyncChartRequest.Size(m)
}
func (m *SyncChartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncChartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncChartRequest proto.InternalMessageInfo

func (m *SyncChartRequest) GetChart() *Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *SyncChartRequest) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *SyncChartRequest) GetRetag() *ReTag {
	if m != nil {
		return m.Retag
	}
	return nil
}

func (m *SyncChartRequest) GetRegistryAuth() *RegistryAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *SyncChartRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *SyncChartRequest) GetColor() bool {
	if m != nil {
		return m.Color
	}
	return false
}

func (m *SyncChartRequest) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

type InstallChartRequest struct {
	Chart                *Chart        `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	Tiller               *Tiller       `protobuf:"bytes,2,opt,name=tiller,proto3" json:"tiller,omitempty"`
	Timeout              string        `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Sync                 bool          `protobuf:"varint,4,opt,name=sync,proto3" json:"sync,omitempty"`
	Retag                *ReTag        `protobuf:"bytes,5,opt,name=retag,proto3" json:"retag,omitempty"`
	RegistryAuth         *RegistryAuth `protobuf:"bytes,6,opt,name=registry_auth,json=registryAuth,proto3" json:"registry_auth,omitempty"`
	Verbose              bool          `protobuf:"varint,7,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Color                bool          `protobuf:"varint,8,opt,name=color,proto3" json:"color,omitempty"`
	Set                  []string      `protobuf:"bytes,9,rep,name=set,proto3" json:"set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InstallChartRequest) Reset()         { *m = InstallChartRequest{} }
func (m *InstallChartRequest) String() string { return proto.CompactTextString(m) }
func (*InstallChartRequest) ProtoMessage()    {}
func (*InstallChartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75f80b18f5aaa93a, []int{1}
}

func (m *InstallChartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallChartRequest.Unmarshal(m, b)
}
func (m *InstallChartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallChartRequest.Marshal(b, m, deterministic)
}
func (m *InstallChartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallChartRequest.Merge(m, src)
}
func (m *InstallChartRequest) XXX_Size() int {
	return xxx_messageInfo_InstallChartRequest.Size(m)
}
func (m *InstallChartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallChartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InstallChartRequest proto.InternalMessageInfo

func (m *InstallChartRequest) GetChart() *Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *InstallChartRequest) GetTiller() *Tiller {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *InstallChartRequest) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *InstallChartRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

func (m *InstallChartRequest) GetRetag() *ReTag {
	if m != nil {
		return m.Retag
	}
	return nil
}

func (m *InstallChartRequest) GetRegistryAuth() *RegistryAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *InstallChartRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *InstallChartRequest) GetColor() bool {
	if m != nil {
		return m.Color
	}
	return false
}

func (m *InstallChartRequest) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

type DeleteChartRequest struct {
	Tiller               *Tiller  `protobuf:"bytes,1,opt,name=tiller,proto3" json:"tiller,omitempty"`
	ChartName            string   `protobuf:"bytes,2,opt,name=chart_name,json=chartName,proto3" json:"chart_name,omitempty"`
	ChartVersion         string   `protobuf:"bytes,3,opt,name=chart_version,json=chartVersion,proto3" json:"chart_version,omitempty"`
	Timeout              string   `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Verbose              bool     `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteChartRequest) Reset()         { *m = DeleteChartRequest{} }
func (m *DeleteChartRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteChartRequest) ProtoMessage()    {}
func (*DeleteChartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75f80b18f5aaa93a, []int{2}
}

func (m *DeleteChartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteChartRequest.Unmarshal(m, b)
}
func (m *DeleteChartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteChartRequest.Marshal(b, m, deterministic)
}
func (m *DeleteChartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteChartRequest.Merge(m, src)
}
func (m *DeleteChartRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteChartRequest.Size(m)
}
func (m *DeleteChartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteChartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteChartRequest proto.InternalMessageInfo

func (m *DeleteChartRequest) GetTiller() *Tiller {
	if m != nil {
		return m.Tiller
	}
	return nil
}

func (m *DeleteChartRequest) GetChartName() string {
	if m != nil {
		return m.ChartName
	}
	return ""
}

func (m *DeleteChartRequest) GetChartVersion() string {
	if m != nil {
		return m.ChartVersion
	}
	return ""
}

func (m *DeleteChartRequest) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *DeleteChartRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

type GenerateScriptRequest struct {
	Chart                *Chart   `protobuf:"bytes,1,opt,name=chart,proto3" json:"chart,omitempty"`
	Pull                 bool     `protobuf:"varint,2,opt,name=pull,proto3" json:"pull,omitempty"`
	Retag                *ReTag   `protobuf:"bytes,3,opt,name=retag,proto3" json:"retag,omitempty"`
	Save                 bool     `protobuf:"varint,4,opt,name=save,proto3" json:"save,omitempty"`
	Load                 bool     `protobuf:"varint,5,opt,name=load,proto3" json:"load,omitempty"`
	Set                  []string `protobuf:"bytes,6,rep,name=set,proto3" json:"set,omitempty"`
	Verbose              bool     `protobuf:"varint,7,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenerateScriptRequest) Reset()         { *m = GenerateScriptRequest{} }
func (m *GenerateScriptRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateScriptRequest) ProtoMessage()    {}
func (*GenerateScriptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75f80b18f5aaa93a, []int{3}
}

func (m *GenerateScriptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenerateScriptRequest.Unmarshal(m, b)
}
func (m *GenerateScriptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenerateScriptRequest.Marshal(b, m, deterministic)
}
func (m *GenerateScriptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateScriptRequest.Merge(m, src)
}
func (m *GenerateScriptRequest) XXX_Size() int {
	return xxx_messageInfo_GenerateScriptRequest.Size(m)
}
func (m *GenerateScriptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateScriptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateScriptRequest proto.InternalMessageInfo

func (m *GenerateScriptRequest) GetChart() *Chart {
	if m != nil {
		return m.Chart
	}
	return nil
}

func (m *GenerateScriptRequest) GetPull() bool {
	if m != nil {
		return m.Pull
	}
	return false
}

func (m *GenerateScriptRequest) GetRetag() *ReTag {
	if m != nil {
		return m.Retag
	}
	return nil
}

func (m *GenerateScriptRequest) GetSave() bool {
	if m != nil {
		return m.Save
	}
	return false
}

func (m *GenerateScriptRequest) GetLoad() bool {
	if m != nil {
		return m.Load
	}
	return false
}

func (m *GenerateScriptRequest) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

func (m *GenerateScriptRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func init() {
	proto.RegisterType((*SyncChartRequest)(nil), "softleader.captainkube.v2.SyncChartRequest")
	proto.RegisterType((*InstallChartRequest)(nil), "softleader.captainkube.v2.InstallChartRequest")
	proto.RegisterType((*DeleteChartRequest)(nil), "softleader.captainkube.v2.DeleteChartRequest")
	proto.RegisterType((*GenerateScriptRequest)(nil), "softleader.captainkube.v2.GenerateScriptRequest")
}

func init() { proto.RegisterFile("captain.proto", fileDescriptor_75f80b18f5aaa93a) }

var fileDescriptor_75f80b18f5aaa93a = []byte{
	// 627 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xef, 0x6a, 0xd4, 0x40,
	0x10, 0x27, 0xbd, 0xbf, 0x99, 0xeb, 0x95, 0xba, 0x2a, 0xc4, 0x82, 0x10, 0x2b, 0xd2, 0x13, 0x6d,
	0x28, 0x27, 0x08, 0x7e, 0xd4, 0x0a, 0x22, 0x54, 0x91, 0x6d, 0x55, 0xd0, 0x0f, 0xc7, 0x76, 0x3b,
	0xa6, 0xa1, 0x9b, 0x6c, 0xdc, 0xdd, 0x9c, 0xf4, 0x1d, 0x7c, 0x14, 0xdf, 0xc3, 0xc7, 0xf1, 0x0d,
	0x44, 0xb2, 0x49, 0xee, 0x8f, 0xf6, 0x52, 0xef, 0xda, 0x6f, 0x33, 0x93, 0xdf, 0x6f, 0x66, 0x77,
	0x7e, 0x33, 0x49, 0xa0, 0xcf, 0x59, 0x6a, 0x58, 0x94, 0x04, 0xa9, 0x92, 0x46, 0x92, 0x3b, 0x5a,
	0x7e, 0x31, 0x02, 0xd9, 0x09, 0xaa, 0xa0, 0x7c, 0x72, 0x96, 0x1d, 0x63, 0x30, 0x1e, 0x6e, 0xf5,
	0xf8, 0x29, 0x53, 0xa6, 0xc0, 0x6d, 0xf5, 0xa2, 0x98, 0x85, 0x58, 0x3a, 0x6e, 0xac, 0xc3, 0xd2,
	0xec, 0x8f, 0x51, 0xe9, 0x48, 0x26, 0x15, 0x2c, 0x55, 0x59, 0x32, 0x81, 0xa9, 0x98, 0x4f, 0xcd,
	0xa8, 0x34, 0x6f, 0x70, 0x99, 0x68, 0x29, 0x70, 0x94, 0x29, 0x51, 0x84, 0xb6, 0x7f, 0xac, 0xc1,
	0xe6, 0xe1, 0x79, 0xc2, 0xf7, 0xf3, 0x82, 0x14, 0xbf, 0x66, 0xa8, 0x0d, 0x79, 0x0a, 0x2d, 0x7b,
	0x00, 0xcf, 0xf1, 0x9d, 0x41, 0x6f, 0xe8, 0x07, 0x0b, 0x4f, 0x1a, 0x14, 0xbc, 0x02, 0x4e, 0x3c,
	0xe8, 0x98, 0x28, 0x46, 0x99, 0x19, 0x6f, 0xcd, 0x77, 0x06, 0x2e, 0xad, 0xdc, 0x3c, 0xa3, 0x42,
	0xc3, 0x42, 0xaf, 0x71, 0x69, 0x46, 0x8a, 0x47, 0x2c, 0xa4, 0x05, 0x9c, 0x1c, 0x40, 0x5f, 0x61,
	0x18, 0x69, 0xa3, 0xce, 0x47, 0x2c, 0x33, 0xa7, 0x5e, 0xd3, 0xf2, 0x77, 0x6a, 0xf9, 0x05, 0xfe,
	0x79, 0x66, 0x4e, 0xe9, 0xba, 0x9a, 0xf1, 0xf2, 0xf3, 0x8d, 0x51, 0x1d, 0x4b, 0x8d, 0x5e, 0xcb,
	0x77, 0x06, 0x5d, 0x5a, 0xb9, 0xe4, 0x16, 0xb4, 0xb8, 0x14, 0x52, 0x79, 0x6d, 0x1b, 0x2f, 0x1c,
	0xb2, 0x09, 0x0d, 0x8d, 0xc6, 0xeb, 0xf8, 0x8d, 0x81, 0x4b, 0x73, 0x73, 0xfb, 0xf7, 0x1a, 0xdc,
	0x7c, 0x9d, 0x68, 0xc3, 0x84, 0xb8, 0x96, 0x8e, 0x3d, 0x83, 0xb6, 0x89, 0x84, 0x40, 0x65, 0x1b,
	0xd6, 0x1b, 0xde, 0xab, 0x21, 0x1e, 0x59, 0x20, 0x2d, 0x09, 0xb3, 0xcd, 0x6e, 0xcc, 0x37, 0x9b,
	0x40, 0x53, 0x9f, 0x27, 0xdc, 0xf6, 0xaa, 0x4b, 0xad, 0x3d, 0x15, 0xa0, 0x75, 0x45, 0x01, 0xda,
	0xd7, 0x24, 0x40, 0x67, 0x81, 0x00, 0xdd, 0x0b, 0x04, 0x70, 0xa7, 0x02, 0xfc, 0x74, 0x80, 0xbc,
	0x44, 0x81, 0x06, 0xe7, 0xfa, 0x3f, 0xed, 0xa3, 0xb3, 0x6c, 0x1f, 0xef, 0x02, 0x58, 0x2d, 0x46,
	0x09, 0x8b, 0xb1, 0x9c, 0x5b, 0xd7, 0x46, 0xde, 0xb2, 0x18, 0xc9, 0x7d, 0xe8, 0x17, 0x8f, 0xcb,
	0x6d, 0x2b, 0x9b, 0xbd, 0x6e, 0x83, 0x1f, 0x8a, 0xd8, 0xac, 0x16, 0xcd, 0x79, 0x2d, 0x16, 0x8e,
	0xdc, 0xf6, 0x2f, 0x07, 0x6e, 0xbf, 0xc2, 0x04, 0x15, 0x33, 0x78, 0xc8, 0x55, 0x94, 0x5e, 0x79,
	0x98, 0x08, 0x34, 0xd3, 0x4c, 0x08, 0x7b, 0x87, 0x2e, 0xb5, 0xf6, 0xca, 0x8b, 0x97, 0xcf, 0x10,
	0x1b, 0xe3, 0x64, 0x86, 0xd8, 0x18, 0xf3, 0x98, 0x90, 0xec, 0xa4, 0xbc, 0x88, 0xb5, 0x2b, 0x85,
	0xda, 0x13, 0x85, 0x16, 0x6b, 0x3c, 0xfc, 0xde, 0x81, 0xce, 0x7e, 0x51, 0x93, 0x70, 0x70, 0x27,
	0xaf, 0x1d, 0xf2, 0xa8, 0xe6, 0x54, 0x7f, 0xbf, 0x9c, 0xb6, 0x76, 0x6a, 0xdb, 0x91, 0x25, 0x67,
	0x6f, 0x50, 0x6b, 0x16, 0xe2, 0x9e, 0x43, 0x22, 0x58, 0x9f, 0x5d, 0x56, 0x12, 0xd4, 0x50, 0x2f,
	0xd8, 0xea, 0x65, 0x4a, 0x85, 0xd0, 0x9b, 0x19, 0x4b, 0xb2, 0x5b, 0xc3, 0xfc, 0x77, 0x7c, 0x97,
	0x29, 0x14, 0xc3, 0xc6, 0xfc, 0xd4, 0x90, 0xbd, 0x1a, 0xf2, 0x85, 0x03, 0xb6, 0x4c, 0xb9, 0xcf,
	0xd0, 0x7a, 0x97, 0x7f, 0x57, 0x48, 0x1d, 0xc7, 0x22, 0x56, 0x48, 0x3e, 0x82, 0x4e, 0xb5, 0x41,
	0x0f, 0x6b, 0x58, 0x25, 0x66, 0xa5, 0x01, 0x80, 0xfd, 0xe2, 0x93, 0xf7, 0x9e, 0x1e, 0x90, 0xc7,
	0x75, 0xc4, 0x09, 0xac, 0x2a, 0xb3, 0xfb, 0x9f, 0x68, 0x9d, 0xca, 0x44, 0x23, 0xf9, 0x08, 0x0d,
	0x1a, 0x73, 0xf2, 0xa0, 0x6e, 0xc1, 0x62, 0xbe, 0xc2, 0x1d, 0x6c, 0xe2, 0xe8, 0x92, 0xc4, 0xd1,
	0xf2, 0x89, 0x5f, 0x0c, 0xc1, 0x37, 0xdf, 0x02, 0x2e, 0xe3, 0xc5, 0x94, 0x4f, 0x1b, 0xf3, 0xfe,
	0x71, 0xdb, 0xfe, 0x35, 0x3c, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x71, 0x94, 0x75, 0xcb,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CaptainClient is the client API for Captain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CaptainClient interface {
	SyncChart(ctx context.Context, in *SyncChartRequest, opts ...grpc.CallOption) (Captain_SyncChartClient, error)
	InstallChart(ctx context.Context, in *InstallChartRequest, opts ...grpc.CallOption) (Captain_InstallChartClient, error)
	DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (Captain_DeleteChartClient, error)
	GenerateScript(ctx context.Context, in *GenerateScriptRequest, opts ...grpc.CallOption) (Captain_GenerateScriptClient, error)
	Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (Captain_PruneClient, error)
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (Captain_VersionClient, error)
	ConsoleURL(ctx context.Context, in *ConsoleURLRequest, opts ...grpc.CallOption) (*ConsoleURLResponse, error)
	Rmc(ctx context.Context, in *RmcRequest, opts ...grpc.CallOption) (Captain_RmcClient, error)
	Rmi(ctx context.Context, in *RmiRequest, opts ...grpc.CallOption) (Captain_RmiClient, error)
}

type captainClient struct {
	cc *grpc.ClientConn
}

func NewCaptainClient(cc *grpc.ClientConn) CaptainClient {
	return &captainClient{cc}
}

func (c *captainClient) SyncChart(ctx context.Context, in *SyncChartRequest, opts ...grpc.CallOption) (Captain_SyncChartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[0], "/softleader.captainkube.v2.Captain/SyncChart", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainSyncChartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_SyncChartClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainSyncChartClient struct {
	grpc.ClientStream
}

func (x *captainSyncChartClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) InstallChart(ctx context.Context, in *InstallChartRequest, opts ...grpc.CallOption) (Captain_InstallChartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[1], "/softleader.captainkube.v2.Captain/InstallChart", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainInstallChartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_InstallChartClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainInstallChartClient struct {
	grpc.ClientStream
}

func (x *captainInstallChartClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) DeleteChart(ctx context.Context, in *DeleteChartRequest, opts ...grpc.CallOption) (Captain_DeleteChartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[2], "/softleader.captainkube.v2.Captain/DeleteChart", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainDeleteChartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_DeleteChartClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainDeleteChartClient struct {
	grpc.ClientStream
}

func (x *captainDeleteChartClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) GenerateScript(ctx context.Context, in *GenerateScriptRequest, opts ...grpc.CallOption) (Captain_GenerateScriptClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[3], "/softleader.captainkube.v2.Captain/GenerateScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainGenerateScriptClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_GenerateScriptClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainGenerateScriptClient struct {
	grpc.ClientStream
}

func (x *captainGenerateScriptClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) Prune(ctx context.Context, in *PruneRequest, opts ...grpc.CallOption) (Captain_PruneClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[4], "/softleader.captainkube.v2.Captain/Prune", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainPruneClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_PruneClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainPruneClient struct {
	grpc.ClientStream
}

func (x *captainPruneClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (Captain_VersionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[5], "/softleader.captainkube.v2.Captain/Version", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainVersionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_VersionClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainVersionClient struct {
	grpc.ClientStream
}

func (x *captainVersionClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) ConsoleURL(ctx context.Context, in *ConsoleURLRequest, opts ...grpc.CallOption) (*ConsoleURLResponse, error) {
	out := new(ConsoleURLResponse)
	err := c.cc.Invoke(ctx, "/softleader.captainkube.v2.Captain/ConsoleURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *captainClient) Rmc(ctx context.Context, in *RmcRequest, opts ...grpc.CallOption) (Captain_RmcClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[6], "/softleader.captainkube.v2.Captain/Rmc", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainRmcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_RmcClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainRmcClient struct {
	grpc.ClientStream
}

func (x *captainRmcClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *captainClient) Rmi(ctx context.Context, in *RmiRequest, opts ...grpc.CallOption) (Captain_RmiClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Captain_serviceDesc.Streams[7], "/softleader.captainkube.v2.Captain/Rmi", opts...)
	if err != nil {
		return nil, err
	}
	x := &captainRmiClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Captain_RmiClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type captainRmiClient struct {
	grpc.ClientStream
}

func (x *captainRmiClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CaptainServer is the server API for Captain service.
type CaptainServer interface {
	SyncChart(*SyncChartRequest, Captain_SyncChartServer) error
	InstallChart(*InstallChartRequest, Captain_InstallChartServer) error
	DeleteChart(*DeleteChartRequest, Captain_DeleteChartServer) error
	GenerateScript(*GenerateScriptRequest, Captain_GenerateScriptServer) error
	Prune(*PruneRequest, Captain_PruneServer) error
	Version(*VersionRequest, Captain_VersionServer) error
	ConsoleURL(context.Context, *ConsoleURLRequest) (*ConsoleURLResponse, error)
	Rmc(*RmcRequest, Captain_RmcServer) error
	Rmi(*RmiRequest, Captain_RmiServer) error
}

func RegisterCaptainServer(s *grpc.Server, srv CaptainServer) {
	s.RegisterService(&_Captain_serviceDesc, srv)
}

func _Captain_SyncChart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncChartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).SyncChart(m, &captainSyncChartServer{stream})
}

type Captain_SyncChartServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainSyncChartServer struct {
	grpc.ServerStream
}

func (x *captainSyncChartServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_InstallChart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstallChartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).InstallChart(m, &captainInstallChartServer{stream})
}

type Captain_InstallChartServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainInstallChartServer struct {
	grpc.ServerStream
}

func (x *captainInstallChartServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_DeleteChart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteChartRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).DeleteChart(m, &captainDeleteChartServer{stream})
}

type Captain_DeleteChartServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainDeleteChartServer struct {
	grpc.ServerStream
}

func (x *captainDeleteChartServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_GenerateScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateScriptRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).GenerateScript(m, &captainGenerateScriptServer{stream})
}

type Captain_GenerateScriptServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainGenerateScriptServer struct {
	grpc.ServerStream
}

func (x *captainGenerateScriptServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_Prune_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PruneRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).Prune(m, &captainPruneServer{stream})
}

type Captain_PruneServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainPruneServer struct {
	grpc.ServerStream
}

func (x *captainPruneServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_Version_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VersionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).Version(m, &captainVersionServer{stream})
}

type Captain_VersionServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainVersionServer struct {
	grpc.ServerStream
}

func (x *captainVersionServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_ConsoleURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsoleURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptainServer).ConsoleURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/softleader.captainkube.v2.Captain/ConsoleURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptainServer).ConsoleURL(ctx, req.(*ConsoleURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Captain_Rmc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RmcRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).Rmc(m, &captainRmcServer{stream})
}

type Captain_RmcServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainRmcServer struct {
	grpc.ServerStream
}

func (x *captainRmcServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Captain_Rmi_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RmiRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CaptainServer).Rmi(m, &captainRmiServer{stream})
}

type Captain_RmiServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type captainRmiServer struct {
	grpc.ServerStream
}

func (x *captainRmiServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Captain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "softleader.captainkube.v2.Captain",
	HandlerType: (*CaptainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConsoleURL",
			Handler:    _Captain_ConsoleURL_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncChart",
			Handler:       _Captain_SyncChart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InstallChart",
			Handler:       _Captain_InstallChart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteChart",
			Handler:       _Captain_DeleteChart_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GenerateScript",
			Handler:       _Captain_GenerateScript_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Prune",
			Handler:       _Captain_Prune_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Version",
			Handler:       _Captain_Version_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Rmc",
			Handler:       _Captain_Rmc_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Rmi",
			Handler:       _Captain_Rmi_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "captain.proto",
}
