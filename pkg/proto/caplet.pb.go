// Code generated by protoc-gen-go. DO NOT EDIT.
// source: caplet.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PullImageRequest struct {
	Images               []*Image      `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	RegistryAuth         *RegistryAuth `protobuf:"bytes,2,opt,name=registryAuth,proto3" json:"registryAuth,omitempty"`
	Verbose              bool          `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PullImageRequest) Reset()         { *m = PullImageRequest{} }
func (m *PullImageRequest) String() string { return proto.CompactTextString(m) }
func (*PullImageRequest) ProtoMessage()    {}
func (*PullImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_219179cd1e560aae, []int{0}
}

func (m *PullImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullImageRequest.Unmarshal(m, b)
}
func (m *PullImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullImageRequest.Marshal(b, m, deterministic)
}
func (m *PullImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullImageRequest.Merge(m, src)
}
func (m *PullImageRequest) XXX_Size() int {
	return xxx_messageInfo_PullImageRequest.Size(m)
}
func (m *PullImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullImageRequest proto.InternalMessageInfo

func (m *PullImageRequest) GetImages() []*Image {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *PullImageRequest) GetRegistryAuth() *RegistryAuth {
	if m != nil {
		return m.RegistryAuth
	}
	return nil
}

func (m *PullImageRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func init() {
	proto.RegisterType((*PullImageRequest)(nil), "proto.PullImageRequest")
}

func init() { proto.RegisterFile("caplet.proto", fileDescriptor_219179cd1e560aae) }

var fileDescriptor_219179cd1e560aae = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x4e, 0x2c, 0xc8,
	0x49, 0x2d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xdc, 0x99, 0xb9,
	0x89, 0xe9, 0xa9, 0x10, 0x31, 0x29, 0xce, 0xdc, 0xe2, 0x74, 0x08, 0x53, 0xa9, 0x9b, 0x91, 0x4b,
	0x20, 0xa0, 0x34, 0x27, 0xc7, 0x13, 0x24, 0x1d, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0xa4,
	0xc2, 0xc5, 0x06, 0x56, 0x5e, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0x03, 0x51, 0xac,
	0x07, 0x51, 0x04, 0x95, 0x13, 0x32, 0xe7, 0xe2, 0x29, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xaa,
	0x74, 0x2c, 0x2d, 0xc9, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0x86, 0xaa, 0x0d, 0x42,
	0x92, 0x0a, 0x42, 0x51, 0x28, 0x24, 0xc1, 0xc5, 0x5e, 0x96, 0x5a, 0x94, 0x94, 0x5f, 0x9c, 0x2a,
	0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x11, 0x04, 0xe3, 0x1a, 0xb9, 0x73, 0xb1, 0x39, 0x83, 0x1d, 0x2f,
	0x64, 0xcb, 0xc5, 0x09, 0x77, 0x96, 0x90, 0x38, 0xd4, 0x4c, 0x74, 0x87, 0x4a, 0xc1, 0x2c, 0x73,
	0xce, 0x28, 0xcd, 0xcb, 0xf6, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x55, 0x62, 0x30, 0x60, 0x4c,
	0x62, 0x03, 0x8b, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x77, 0x28, 0xe5, 0x8c, 0x0c, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CapletClient is the client API for Caplet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CapletClient interface {
	PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (Caplet_PullImageClient, error)
}

type capletClient struct {
	cc *grpc.ClientConn
}

func NewCapletClient(cc *grpc.ClientConn) CapletClient {
	return &capletClient{cc}
}

func (c *capletClient) PullImage(ctx context.Context, in *PullImageRequest, opts ...grpc.CallOption) (Caplet_PullImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Caplet_serviceDesc.Streams[0], "/proto.Caplet/PullImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &capletPullImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Caplet_PullImageClient interface {
	Recv() (*ChunkMessage, error)
	grpc.ClientStream
}

type capletPullImageClient struct {
	grpc.ClientStream
}

func (x *capletPullImageClient) Recv() (*ChunkMessage, error) {
	m := new(ChunkMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CapletServer is the server API for Caplet service.
type CapletServer interface {
	PullImage(*PullImageRequest, Caplet_PullImageServer) error
}

func RegisterCapletServer(s *grpc.Server, srv CapletServer) {
	s.RegisterService(&_Caplet_serviceDesc, srv)
}

func _Caplet_PullImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapletServer).PullImage(m, &capletPullImageServer{stream})
}

type Caplet_PullImageServer interface {
	Send(*ChunkMessage) error
	grpc.ServerStream
}

type capletPullImageServer struct {
	grpc.ServerStream
}

func (x *capletPullImageServer) Send(m *ChunkMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Caplet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Caplet",
	HandlerType: (*CapletServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullImage",
			Handler:       _Caplet_PullImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "caplet.proto",
}
